
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/PokerPrefabScript.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b44b7NMjvhMooF1IpLYSEdL', 'PokerPrefabScript');
// Script/PokerPrefabScript.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    BackgroundImage: {
      type: cc.Sprite,
      "default": null
    },
    FrontImage: {
      type: cc.Sprite,
      "default": null
    },
    NumView: {
      type: cc.Sprite,
      "default": null
    },
    DecorsSmallView: {
      type: cc.Sprite,
      "default": null
    },
    DecorsBigView: {
      type: cc.Sprite,
      "default": null
    },
    PreviousPosition: {
      type: cc.Vec2,
      "default": cc.v2(0, 0)
    },
    CurrentPosition: {
      type: cc.Vec2,
      "default": cc.v2(0, 0) // get () {
      //     this._CurrentPosition;
      // },
      // set (value) {
      //     this._CurrentPosition = value;
      // }

    },
    PreviousParent: {
      type: cc.Node,
      "default": null
    },
    PokerNumber: {
      type: cc.integer,
      "default": 0 // get () {
      //     cc.log("InitPokerGet");
      //     return this._PokerNumber;
      // },
      // set (value) {
      //     cc.log("InitPokerSet");
      //     this._PokerNumber = value;
      // }

    },
    PokerRealNumber: {
      type: cc.integer,
      "default": 0
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  start: function start() {
    this.InitPoker(this.node.PokerNumber);
  },
  onClick: function onClick() {
    // this.fanzhuan(this.node);
    // cc.log(cc.find('Canvas'));
    var mainJS = cc.find('Canvas').getComponent('GameSceneScript');
    var currentNode = cc.find('Canvas').getChildByName('CurrentPoker');
    var pokerInitBg = cc.find('Canvas').getChildByName('PokerInstanceBackground'); // cc.log(cc.find('Canvas').getChildByName('CurrentPoker'));
    // cc.log(cc.find('Canvas').getChildByName('PokerInstanceBackground'));
    // cc.log(mainJS.CurrentPoker);
    // cc.log(mainJS.CurrentPoker.node);

    if (this.node.parent === mainJS.CurrentPoker.node) {
      cc.log('GGGGGGGG');
    } else if (this.node.parent === mainJS.PokerInstanceBackground.node) {
      // 判断中间存放牌的位置，是否已被占用
      if (mainJS.CurrentPoker.node.childrenCount >= 1) {
        cc.log('FFFF');
      } else {
        mainJS.fanzhuan(this.node);
      }
    }

    cc.log(this.node.parent);
  },
  fanzhuan: function fanzhuan(pokernode) {
    var size = cc.view.getVisibleSize(); // 先反转90变正面数据，再反转-90回来，结束，整个过程移动牌面到指定位置

    var d1 = cc.delayTime(0.01);
    var mto = cc.moveTo(0.3, cc.v2(69, -size.height / 2 + 95 + 160));
    var fan1 = cc.scaleTo(0.3, 0.2, 1); // var fan1 = cc.flipX(true);

    var changeFront = cc.callFunc(function (target) {
      target.getChildByName("FrontView").active = true;
      target.getChildByName("Background").active = false; // target.convertToWorldSpaceAR(cc.v2(0,0))
    });
    var spawn = cc.spawn([mto, fan1]);
    pokernode.runAction(spawn);
    var d2 = cc.delayTime(0.3);
    var fan2 = cc.scaleTo(0.1, 1, 1);
    var sequ = cc.sequence([d2, changeFront, fan2]);
    pokernode.runAction(sequ);
  },
  InitPoker: function InitPoker(dianshu) {
    var _this = this;

    var num = dianshu % 13;

    if (num === 0) {
      num = 13;
    }

    if (num >= 10) {
      _this.node.PokerRealNumber = 10;
    } else {
      _this.node.PokerRealNumber = num;
    }

    var decors = parseInt(dianshu / 13);
    var decorsString = '';

    switch (decors) {
      case 0:
        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, atlas) {
          if (err) {
            cc.log(err);
            return;
          }

          _this.NumView.spriteFrame = atlas.getSpriteFrame('solitaire_0_' + num);
          _this.DecorsSmallView.spriteFrame = atlas.getSpriteFrame('solitaire_small_2');
          _this.DecorsBigView.spriteFrame = atlas.getSpriteFrame('solitaire_big_2');
        });
        decorsString = "红桃";
        break;

      case 1:
        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, atlas) {
          if (err) {
            cc.log(err);
            return;
          }

          _this.NumView.spriteFrame = atlas.getSpriteFrame('solitaire_0_' + num);
          _this.DecorsSmallView.spriteFrame = atlas.getSpriteFrame('solitaire_small_0');
          _this.DecorsBigView.spriteFrame = atlas.getSpriteFrame('solitaire_big_0');
        });
        decorsString = "方片";
        break;

      case 2:
        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, atlas) {
          if (err) {
            cc.log(err);
            return;
          }

          _this.NumView.spriteFrame = atlas.getSpriteFrame('solitaire_1_' + num);
          _this.DecorsSmallView.spriteFrame = atlas.getSpriteFrame('solitaire_small_3');
          _this.DecorsBigView.spriteFrame = atlas.getSpriteFrame('solitaire_big_3');
        });
        decorsString = "黑桃";
        break;

      case 3:
        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, atlas) {
          if (err) {
            cc.log(err);
            return;
          }

          _this.NumView.spriteFrame = atlas.getSpriteFrame('solitaire_1_' + num);
          _this.DecorsSmallView.spriteFrame = atlas.getSpriteFrame('solitaire_small_1');
          _this.DecorsBigView.spriteFrame = atlas.getSpriteFrame('solitaire_big_1');
        });
        decorsString = "草花";
        break;

      default:
        break;
    } // cc.log("点数:"+num+"   "+"花色:"+decorsString);

  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvUG9rZXJQcmVmYWJTY3JpcHQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJCYWNrZ3JvdW5kSW1hZ2UiLCJ0eXBlIiwiU3ByaXRlIiwiRnJvbnRJbWFnZSIsIk51bVZpZXciLCJEZWNvcnNTbWFsbFZpZXciLCJEZWNvcnNCaWdWaWV3IiwiUHJldmlvdXNQb3NpdGlvbiIsIlZlYzIiLCJ2MiIsIkN1cnJlbnRQb3NpdGlvbiIsIlByZXZpb3VzUGFyZW50IiwiTm9kZSIsIlBva2VyTnVtYmVyIiwiaW50ZWdlciIsIlBva2VyUmVhbE51bWJlciIsIm9uTG9hZCIsInN0YXJ0IiwiSW5pdFBva2VyIiwibm9kZSIsIm9uQ2xpY2siLCJtYWluSlMiLCJmaW5kIiwiZ2V0Q29tcG9uZW50IiwiY3VycmVudE5vZGUiLCJnZXRDaGlsZEJ5TmFtZSIsInBva2VySW5pdEJnIiwicGFyZW50IiwiQ3VycmVudFBva2VyIiwibG9nIiwiUG9rZXJJbnN0YW5jZUJhY2tncm91bmQiLCJjaGlsZHJlbkNvdW50IiwiZmFuemh1YW4iLCJwb2tlcm5vZGUiLCJzaXplIiwidmlldyIsImdldFZpc2libGVTaXplIiwiZDEiLCJkZWxheVRpbWUiLCJtdG8iLCJtb3ZlVG8iLCJoZWlnaHQiLCJmYW4xIiwic2NhbGVUbyIsImNoYW5nZUZyb250IiwiY2FsbEZ1bmMiLCJ0YXJnZXQiLCJhY3RpdmUiLCJzcGF3biIsInJ1bkFjdGlvbiIsImQyIiwiZmFuMiIsInNlcXUiLCJzZXF1ZW5jZSIsImRpYW5zaHUiLCJfdGhpcyIsIm51bSIsImRlY29ycyIsInBhcnNlSW50IiwiZGVjb3JzU3RyaW5nIiwibG9hZGVyIiwibG9hZFJlcyIsIlNwcml0ZUF0bGFzIiwiZXJyIiwiYXRsYXMiLCJzcHJpdGVGcmFtZSIsImdldFNwcml0ZUZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNB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TixDQUFxQixpQkFBckIsQ0FBbEM7QUFDSCxTQVJEO0FBU0FQLFFBQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0E7O0FBRUo7QUFDSTtBQW5EUixLQWJ5QixDQWtFekI7O0FBRUgsR0E5TEksQ0FpTUw7O0FBak1LLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gTGVhcm4gQXR0cmlidXRlOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIEJhY2tncm91bmRJbWFnZToge1xuICAgICAgICAgICAgdHlwZTpjYy5TcHJpdGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcblxuICAgICAgICBGcm9udEltYWdlOiB7XG4gICAgICAgICAgICB0eXBlOmNjLlNwcml0ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuXG4gICAgICAgIE51bVZpZXc6IHtcbiAgICAgICAgICAgIHR5cGU6Y2MuU3ByaXRlLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIERlY29yc1NtYWxsVmlldzoge1xuICAgICAgICAgICAgdHlwZTpjYy5TcHJpdGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgRGVjb3JzQmlnVmlldzoge1xuICAgICAgICAgICAgdHlwZTpjYy5TcHJpdGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgUHJldmlvdXNQb3NpdGlvbjoge1xuICAgICAgICAgICAgdHlwZTpjYy5WZWMyLFxuICAgICAgICAgICAgZGVmYXVsdDpjYy52MigwLDApXG4gICAgICAgIH0sXG4gICAgICAgIEN1cnJlbnRQb3NpdGlvbjoge1xuICAgICAgICAgICAgdHlwZTpjYy5WZWMyLFxuICAgICAgICAgICAgZGVmYXVsdDpjYy52MigwLDApLFxuICAgICAgICAgICAgLy8gZ2V0ICgpIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLl9DdXJyZW50UG9zaXRpb247XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8gc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gICAgIHRoaXMuX0N1cnJlbnRQb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9LFxuICAgICAgICBQcmV2aW91c1BhcmVudDoge1xuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIFBva2VyTnVtYmVyOiB7XG4gICAgICAgICAgICB0eXBlOmNjLmludGVnZXIsXG4gICAgICAgICAgICBkZWZhdWx0OjAsXG4gICAgICAgICAgICAvLyBnZXQgKCkge1xuICAgICAgICAgICAgLy8gICAgIGNjLmxvZyhcIkluaXRQb2tlckdldFwiKTtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gdGhpcy5fUG9rZXJOdW1iZXI7XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8gc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gICAgIGNjLmxvZyhcIkluaXRQb2tlclNldFwiKTtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLl9Qb2tlck51bWJlciA9IHZhbHVlO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9LFxuICAgICAgICBQb2tlclJlYWxOdW1iZXI6IHtcbiAgICAgICAgICAgIHR5cGU6Y2MuaW50ZWdlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6MCxcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIG9uTG9hZCAoKSB7XG5cbiAgICAgICAgXG5cbiAgICB9LFxuXG4gICAgc3RhcnQgKCkge1xuXG4gICAgICAgIHRoaXMuSW5pdFBva2VyKHRoaXMubm9kZS5Qb2tlck51bWJlcik7XG4gICAgfSxcblxuICAgIG9uQ2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHRoaXMuZmFuemh1YW4odGhpcy5ub2RlKTtcbiAgICAgICAgLy8gY2MubG9nKGNjLmZpbmQoJ0NhbnZhcycpKTtcbiAgICAgICAgdmFyIG1haW5KUyA9IGNjLmZpbmQoJ0NhbnZhcycpLmdldENvbXBvbmVudCgnR2FtZVNjZW5lU2NyaXB0Jyk7XG4gICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IGNjLmZpbmQoJ0NhbnZhcycpLmdldENoaWxkQnlOYW1lKCdDdXJyZW50UG9rZXInKTtcbiAgICAgICAgdmFyIHBva2VySW5pdEJnID0gY2MuZmluZCgnQ2FudmFzJykuZ2V0Q2hpbGRCeU5hbWUoJ1Bva2VySW5zdGFuY2VCYWNrZ3JvdW5kJyk7XG4gICAgICAgIC8vIGNjLmxvZyhjYy5maW5kKCdDYW52YXMnKS5nZXRDaGlsZEJ5TmFtZSgnQ3VycmVudFBva2VyJykpO1xuICAgICAgICAvLyBjYy5sb2coY2MuZmluZCgnQ2FudmFzJykuZ2V0Q2hpbGRCeU5hbWUoJ1Bva2VySW5zdGFuY2VCYWNrZ3JvdW5kJykpO1xuICAgICAgICAvLyBjYy5sb2cobWFpbkpTLkN1cnJlbnRQb2tlcik7XG4gICAgICAgIC8vIGNjLmxvZyhtYWluSlMuQ3VycmVudFBva2VyLm5vZGUpO1xuXG4gICAgICAgIGlmICh0aGlzLm5vZGUucGFyZW50ID09PSBtYWluSlMuQ3VycmVudFBva2VyLm5vZGUpIHtcbiAgICAgICAgICAgIGNjLmxvZygnR0dHR0dHR0cnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5vZGUucGFyZW50ID09PSBtYWluSlMuUG9rZXJJbnN0YW5jZUJhY2tncm91bmQubm9kZSkge1xuICAgICAgICAgICAgLy8g5Yik5pat5Lit6Ze05a2Y5pS+54mM55qE5L2N572u77yM5piv5ZCm5bey6KKr5Y2g55SoXG4gICAgICAgICAgICBpZiAobWFpbkpTLkN1cnJlbnRQb2tlci5ub2RlLmNoaWxkcmVuQ291bnQgPj0gMSkge1xuICAgICAgICAgICAgICAgIGNjLmxvZygnRkZGRicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYWluSlMuZmFuemh1YW4odGhpcy5ub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNjLmxvZyh0aGlzLm5vZGUucGFyZW50KTtcbiAgICB9LFxuXG4gICAgZmFuemh1YW46ZnVuY3Rpb24ocG9rZXJub2RlKSB7XG4gICAgICAgIGxldCBzaXplID0gY2Mudmlldy5nZXRWaXNpYmxlU2l6ZSgpO1xuICAgICAgICAvLyDlhYjlj43ovaw5MOWPmOato+mdouaVsOaNru+8jOWGjeWPjei9rC05MOWbnuadpe+8jOe7k+adn++8jOaVtOS4qui/h+eoi+enu+WKqOeJjOmdouWIsOaMh+WumuS9jee9rlxuICAgICAgICB2YXIgZDEgPSBjYy5kZWxheVRpbWUoMC4wMSk7XG4gICAgICAgIHZhciBtdG8gPSBjYy5tb3ZlVG8oMC4zLCBjYy52Mig2OSwoLXNpemUuaGVpZ2h0IC8gMikgKyA5NSArIDE2MCkpO1xuICAgICAgICB2YXIgZmFuMSA9IGNjLnNjYWxlVG8oMC4zLCAwLjIsIDEpO1xuICAgICAgICAvLyB2YXIgZmFuMSA9IGNjLmZsaXBYKHRydWUpO1xuICAgICAgICB2YXIgY2hhbmdlRnJvbnQgPSBjYy5jYWxsRnVuYyhmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgIHRhcmdldC5nZXRDaGlsZEJ5TmFtZShcIkZyb250Vmlld1wiKS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGFyZ2V0LmdldENoaWxkQnlOYW1lKFwiQmFja2dyb3VuZFwiKS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHRhcmdldC5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIoY2MudjIoMCwwKSlcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzcGF3biA9IGNjLnNwYXduKFttdG8sZmFuMV0pO1xuICAgICAgICBwb2tlcm5vZGUucnVuQWN0aW9uKHNwYXduKTtcbiAgICAgICAgdmFyIGQyID0gY2MuZGVsYXlUaW1lKDAuMyk7XG4gICAgICAgIHZhciBmYW4yID0gY2Muc2NhbGVUbygwLjEsIDEsIDEpO1xuICAgICAgICB2YXIgc2VxdSA9IGNjLnNlcXVlbmNlKFtkMixjaGFuZ2VGcm9udCxmYW4yXSk7XG4gICAgICAgIHBva2Vybm9kZS5ydW5BY3Rpb24oc2VxdSk7XG4gICAgfSxcblxuICAgIEluaXRQb2tlcjpmdW5jdGlvbiAoZGlhbnNodSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbnVtID0gZGlhbnNodSAlIDEzO1xuICAgICAgICBpZiAobnVtID09PSAwKSB7XG4gICAgICAgICAgICBudW0gPSAxMztcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtID49IDEwKSB7XG4gICAgICAgICAgICBfdGhpcy5ub2RlLlBva2VyUmVhbE51bWJlciA9IDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMubm9kZS5Qb2tlclJlYWxOdW1iZXIgPSBudW07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlY29ycyA9IHBhcnNlSW50KGRpYW5zaHUgLyAxMyk7XG4gICAgICAgIHZhciBkZWNvcnNTdHJpbmcgPSAnJztcbiAgICAgICAgc3dpdGNoIChkZWNvcnMpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYy5sb2FkZXIubG9hZFJlcygncG9rZXInLGNjLlNwcml0ZUF0bGFzLGZ1bmN0aW9uKGVycixhdGxhcyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuTnVtVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfMF8nK251bSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkRlY29yc1NtYWxsVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfc21hbGxfMicpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5EZWNvcnNCaWdWaWV3LnNwcml0ZUZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoJ3NvbGl0YWlyZV9iaWdfMicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlY29yc1N0cmluZyA9IFwi57qi5qGDXCJcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYy5sb2FkZXIubG9hZFJlcygncG9rZXInLGNjLlNwcml0ZUF0bGFzLGZ1bmN0aW9uKGVycixhdGxhcyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuTnVtVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfMF8nK251bSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkRlY29yc1NtYWxsVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfc21hbGxfMCcpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5EZWNvcnNCaWdWaWV3LnNwcml0ZUZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoJ3NvbGl0YWlyZV9iaWdfMCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlY29yc1N0cmluZyA9IFwi5pa554mHXCJcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYy5sb2FkZXIubG9hZFJlcygncG9rZXInLGNjLlNwcml0ZUF0bGFzLGZ1bmN0aW9uKGVycixhdGxhcyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuTnVtVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfMV8nK251bSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkRlY29yc1NtYWxsVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfc21hbGxfMycpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5EZWNvcnNCaWdWaWV3LnNwcml0ZUZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoJ3NvbGl0YWlyZV9iaWdfMycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlY29yc1N0cmluZyA9IFwi6buR5qGDXCJcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYy5sb2FkZXIubG9hZFJlcygncG9rZXInLGNjLlNwcml0ZUF0bGFzLGZ1bmN0aW9uKGVycixhdGxhcyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuTnVtVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfMV8nK251bSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkRlY29yc1NtYWxsVmlldy5zcHJpdGVGcmFtZSA9IGF0bGFzLmdldFNwcml0ZUZyYW1lKCdzb2xpdGFpcmVfc21hbGxfMScpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5EZWNvcnNCaWdWaWV3LnNwcml0ZUZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoJ3NvbGl0YWlyZV9iaWdfMScpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlY29yc1N0cmluZyA9IFwi6I2J6IqxXCJcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNjLmxvZyhcIueCueaVsDpcIitudW0rXCIgICBcIitcIuiKseiJsjpcIitkZWNvcnNTdHJpbmcpO1xuICAgICAgICBcbiAgICB9XG5cblxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxufSk7XG4iXX0=