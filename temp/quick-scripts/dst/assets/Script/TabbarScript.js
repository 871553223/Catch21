
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/TabbarScript.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd4304ELgshDo7y4n4IyC8ry', 'TabbarScript');
// Script/TabbarScript.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  RebackAction: function RebackAction() {
    var mainJS = cc.find('Canvas').getComponent('GameSceneScript');

    if (mainJS.CurrentPoker.node.childrenCount >= 1) {
      var node = mainJS.CurrentPoker.node.children[0];
      mainJS.fanzhuan(node);
    }
  },
  PauseAction: function PauseAction() {
    cc.loader.loadRes("music/btn_click", cc.AudioClip, function (err, clip) {
      cc.audioEngine.play(clip, false, 0.5);
    });
    var mainCanvas = cc.find('Canvas');
    var mainJS = cc.find('Canvas').getComponent('GameSceneScript');
    mainJS.TimerPause = !mainJS.TimerPause;

    if (mainJS.TimerPause === true) {
      cc.audioEngine.pauseMusic();
      cc.audioEngine.pauseAllEffects();
    } else {
      cc.audioEngine.resumeMusic();
      cc.audioEngine.resumeAllEffects();
    }

    cc.log("yyy" + mainJS.TimerPause);
    var alertNode = cc.find('Canvas/PauseAlertView');

    if (alertNode != null) {
      alertNode.active = true;
    } else {
      var pauseAlert = cc.instantiate(mainJS.PauseAlertView);
      alertNode = pauseAlert;
      pauseAlert._name = "PauseAlertView";
      mainCanvas.addChild(pauseAlert);
    }

    var mask = cc.find('Canvas/PauseAlertView/bg').getComponent(cc.Sprite);
    alertNode.zIndex = 999;
    mask.Color = cc.Color(0, 0, 0, 0);
  },
  KeepPlayAction: function KeepPlayAction() {
    cc.loader.loadRes("music/btn_click", cc.AudioClip, function (err, clip) {
      cc.audioEngine.play(clip, false, 0.5);
    });
    var alertNode = cc.find('Canvas/PauseAlertView');

    if (alertNode != null) {
      alertNode.active = false;
      var mask = cc.find('Canvas/PauseAlertView/bg').getComponent(cc.Sprite);
      alertNode.zIndex = 999;
      mask.Color = cc.Color(0, 0, 0, 0);
    }

    var mainJS = cc.find('Canvas').getComponent('GameSceneScript');
    mainJS.TimerPause = !mainJS.TimerPause;

    if (mainJS.TimerPause === true) {
      cc.audioEngine.pauseMusic();
      cc.audioEngine.pauseAllEffects();
    } else {
      cc.audioEngine.resumeMusic();
      cc.audioEngine.resumeAllEffects();
    }
  },
  ReplayAction: function ReplayAction() {
    cc.loader.loadRes("music/btn_click", cc.AudioClip, function (err, clip) {
      cc.audioEngine.play(clip, false, 0.5);
    });
    cc.director.loadScene("GameScene", null);
  },
  OutMoveAction: function OutMoveAction() {
    var alertNode = cc.find('Canvas/OutMoveAlertView');

    if (alertNode != null && alertNode.active === true) {
      return;
    }

    if (alertNode != null) {
      alertNode.active = true;
    } else {
      var mainJS = cc.find('Canvas').getComponent('GameSceneScript');
      var mainCanvas = cc.find('Canvas');
      var gameOverAlert = cc.instantiate(mainJS.OutMoveAlertView);
      alertNode = gameOverAlert;
      gameOverAlert._name = "OutMoveAlertView";
      mainCanvas.addChild(gameOverAlert);
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,